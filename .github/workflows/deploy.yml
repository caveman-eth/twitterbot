name: Deploy to VPS

on:
  push:
    branches: [main]
  workflow_dispatch: # Allows manual triggering

jobs:
  deploy:
    name: Deploy to Production VPS
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build TypeScript
        run: npm run build
        
      - name: Run tests (if any)
        run: npm test --if-present
        
      - name: Deploy to VPS
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            set -e  # Exit immediately if any command fails
            set -u  # Exit on undefined variables
            set -o pipefail  # Exit on pipe failures
            
            echo "🚀 Starting deployment..."
            
            # Navigate to project directory
            cd /var/www/twitterbot || { echo "❌ Project directory not found"; exit 1; }
            echo "✅ In project directory: $(pwd)"
            
            # Pull latest changes
            echo "📥 Pulling latest changes..."
            if ! git pull origin main; then
              echo "❌ Failed to pull latest changes"
              exit 1
            fi
            echo "✅ Git pull completed"
            
            # Install dependencies (including dev deps for build)
            echo "📦 Installing dependencies..."
            if ! npm ci; then
              echo "❌ Failed to install dependencies"
              exit 1
            fi
            echo "✅ Dependencies installed"
            
            # Build the project
            echo "🔨 Building project..."
            if ! npm run build; then
              echo "❌ Build failed"
              exit 1
            fi
            echo "✅ Build completed"
            
            # Verify build output exists
            if [ ! -d "dist" ] || [ -z "$(ls -A dist)" ]; then
              echo "❌ Build output directory 'dist' is empty or missing"
              exit 1
            fi
            echo "✅ Build output verified: $(ls -1 dist/ | wc -l) files in dist/"
            
            # Install production-only dependencies for runtime
            echo "📦 Installing production dependencies..."
            if ! npm ci --omit=dev; then
              echo "❌ Failed to install production dependencies"
              exit 1
            fi
            echo "✅ Production dependencies installed"
            
            # Handle PM2 restart/start properly
            echo "🔄 Managing PM2 process..."
            if pm2 list | grep -q "xbot.*online"; then
              echo "🔄 Reloading existing PM2 process..."
              if ! pm2 reload xbot --update-env; then
                echo "❌ Failed to reload PM2 process"
                exit 1
              fi
              echo "✅ PM2 process reloaded"
            else
              echo "🚀 Starting new PM2 process..."
              if ! pm2 start dist/index.js --name xbot; then
                echo "❌ Failed to start PM2 process"
                exit 1
              fi
              echo "✅ PM2 process started"
            fi
            
            # Wait for process to start and initialize
            echo "⏳ Waiting for application startup..."
            sleep 8
            
            # Verify the process is actually running
            echo "🔍 Verifying deployment..."
            pm2 status
            
            if ! pm2 list | grep "xbot" | grep -q "online"; then
              echo "❌ Application failed to start properly"
              echo "📝 Recent logs:"
              pm2 logs xbot --lines 20 --nostream || true
              exit 1
            fi
            
            # Verify scheduler persistence is working
            echo "🔍 Checking scheduler persistence..."
            if curl -s http://localhost:3000/api/scheduler/status > /dev/null; then
              echo "✅ Application responding to API requests"
              # Check if scheduler was previously enabled and should auto-start
              if curl -s http://localhost:3000/api/scheduler/status | grep -q '"isRunning":true'; then
                echo "✅ Scheduler auto-started from database state"
              else
                echo "ℹ️  Scheduler remained stopped (as expected from database state)"
              fi
            else
              echo "⚠️  Application not responding to API requests yet (this might be normal)"
            fi
            
            # Save PM2 configuration
            pm2 save
            
            echo "✅ Deployment completed successfully at $(date)"
            echo "🎉 Application is running and healthy!"
            
      - name: Deployment Status
        if: success()
        run: |
          echo "✅ Deployment to VPS completed successfully!"
          echo "🎉 Application should be running at your VPS"
        
      - name: Deployment Failed - Get Logs
        if: failure()
        uses: appleboy/ssh-action@v0.1.7
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          script: |
            echo "❌ Deployment failed. Gathering debug info..."
            echo ""
            echo "📊 PM2 Status:"
            pm2 status || echo "PM2 not running"
            echo ""
            echo "📝 Recent application logs:"
            pm2 logs xbot --lines 30 --nostream || echo "No logs available"
            echo ""
            echo "🔍 System status:"
            echo "  Node version: $(node --version)"
            echo "  NPM version: $(npm --version)"
            echo "  PM2 version: $(pm2 --version)"
            echo "  Disk space: $(df -h /var/www/twitterbot 2>/dev/null | tail -1 || echo 'N/A')"
        continue-on-error: true
        
      - name: Notify Deployment Status
        if: failure()
        run: |
          echo "❌ Deployment failed!"
          echo "📋 Check the 'Deployment Failed - Get Logs' step above for detailed error information"
          echo "🔧 Common fixes:"
          echo "  1. Check environment variables on VPS"
          echo "  2. Verify database connectivity"
          echo "  3. Check disk space and permissions"
          echo "  4. Review application logs for specific errors"
